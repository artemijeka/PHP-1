<?php
////////////////////////////////////////////////////////////////////////////////////////////////////
/****************************************** ПЕРЕМЕННЫЕ: ******************************************/
// ДОСТУП К ЛЮБОЙ ГЛОБАЛЬНОЙ ПЕРЕМЕННОЙ (КОТОРАЯ НЕ В ФУНКЦИИ)
$GLOBALS("any_var"); // через глобальный массив $GLOBALS без $ - рекомендуемый способ обращения
// ИЛИ
global $any_var; // через ключевое слово global - тоже самое по действию (ссылка на глобальную переменную, все изменения будут происходит с глобальной переменной в любой функции)
// ДОСТУП К НЕСКОЛЬКИМ ГЛОБАЛЬНЫМ ПЕРЕМЕННЫМ
global $dinner, $lunch, $breakfast; // через запятую
////////////////////////////////////////////////////////////////////////////////////////////////////
/******************************************** СТРОКИ: ********************************************/
// ПОЛУЧИТЬ ЧАСТЬ СТРОКИ В UTF-8 mb_substr("СТРОКА какая-то", 0, 2); // 2 первых символа "СТ"
mb_substr("СТРОКА какая-то", -2, 2); // 2 последних символа "то" mb_substr("СТРОКА какая-то", 5,
-3); // начиная с 5ого символа и обрезать с конца 3 симола "А какая" mb_substr("СТРОКА какая-то",
-5, -2); // начиная с конца с 5ого символа и 2 символа обрезав с конца "ая-"

////////////////////////////////////////////////////////////////////////////////////////////////////
/**************************************** ПРЕОБРАЗОВАНИЯ: ****************************************/
// СТРОКИ В ЧИСЛО
(int)"6 pack"; // 6

////////////////////////////////////////////////////////////////////////////////////////////////////
/******************************************* ОПЕРАЦИИ: *******************************************/
// ОТРИЦАНИЕ !
!true === false; // не истина === лжи

// ЛОГИЧЕСКИЕ ОПЕРАЦИИ && и ||
true && true; // true
false || true; // true

////////////////////////////////////////////////////////////////////////////////////////////////////
/******************************************* СРАВНЕНИЯ: *******************************************/
// СТРОК strcmp() или strcasecmp()
strcmp("abs", "ABS"); // -1 так как ABS (верхний регистр) идет раньше, а abs позже, в символьной таблице PHP.
strcasecmp("abs", "ABS"); // 0 так как abs === abs. Так как strcasecmp() - регистроНЕЗАВИСИМАЯ функция.

// СРАВНЕНИЯ СОСТАВНОЙ ОПЕРАЦИЕЙ <=> (PHP>7)
1 <=> 2; // -1 левое меньше правого.
"charlie" <=> "bob"; // 1 левое больше правого, так как "c" идет после "b" в лексиграфической таблице PHP.

////////////////////////////////////////////////////////////////////////////////////////////////////
/********************************************* ЦИКЛЫ: *********************************************/
// FOR (для условия) for();

// WHILE (пока верно условие) while();

////////////////////////////////////////////////////////////////////////////////////////////////////
/******************************************** МАССИВЫ: ********************************************/
// ПРОВЕРКА НА КОНЕЦ МАССИВА
!next($array); // если нет следующего элемента то это конец массива

// ПОЛУЧИТЬ ТЕКУЩИЙ ЭЛЕМЕНТ МАССИВА
current($array); // получить текущий элемент массива
next($array); // перевод указателя на следующий элемент
current($array); // получить слудующий элемент массива

// ПОЛУЧИТЬ КЛЮЧ ТЕКУЩЕГО ЭЛЕМЕНТА В МАССИВЕ
key($array); // ключ текущего элемента массива
next($array); // перевод указателя на следующий элемент
key($array); // получение следующего ключа

// УЗНАТЬ ЕСТЬ ЛИ В МАССИВЕ КЛЮЧ
array_key_exists(mixed($key), $array); // ОТДАСТ TRUE или FALSE в зависимости от того есть ли такой КЛЮЧ в массиве

// ПРОВЕРКА СУЩЕСТВОВАНИЯ ЭЛЕМЕНТА В МАССИВЕ С КОНКРЕТНЫМ ЗНАЧЕНИЕМ
in_array(mixed($value), $array); // ОТДАСТ TRUE или FALSE в зависимости от того есть ли такое ЗНАЧЕНИЕ в массиве

// ПОЛУЧИТЬ КЛЮЧ ИСКОМОГО ЗНАЧЕНИЯ ЭЛЕМЕНТА В МАССИВЕ

// УДАЛИТЬ ЭЛЕМЕНТ МАССИВА
unset($var['Example']);
array_search(mixed($value), $array); // ОТДАСТ КЛЮЧ если такое ЗНАЧЕНИЕ есть в массиве

// ВЫВОД МАССИВА В СТРОКУ ЧЕРЕЗ РАЗДЕЛИТЕЛЬ
implode(', ', $array);

// СОРТИРОВКА ЗНАЧЕНИЙ МАССИВА
sort($array); // сортирует значения элементов по алфавиту и возрастанию чисел, при этом сбрасывает ключи на индексы если это ассоциативный массив
rsort($array);// реверсивная сортировка

// СОРТИРОВКА ЗНАЧЕНИЙ АССОЦИАТИВНОГО МАССИВА
asort($assoc_array); // сортирует значения массива по алфавиту и возрастанию цифр, при этом НЕ СБРАСЫВАЕТ ключи ассоциативного массива
arsort($assoc_array);// реверсивная сортировка

// СОРТИРОВКА ПО КЛЮЧАМ МАССИВА
ksort($assoc_array); // сортирует ключи массива по алфавиту и возрастанию цифр
krsort($assoc_array);// реверсивная сортировка
